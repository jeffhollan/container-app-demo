# yaml-language-server: $schema=./build.yaml
name: Docker Build
on:
  push:
    branches: [ main ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-python:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      containerImage: ${{ steps.image-digest.outputs.digest }}
      containerTag: ${{ fromJson(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/python-service

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./python-service
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output digest
        id: image-digest
        run: echo "::set-output name=digest::$(docker inspect ${{ fromJson(steps.meta.outputs.json).tags[0] }} | jq -r '.[].RepoDigests[0]')"
  
  build-dotnet:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      containerImage: ${{ steps.image-digest.outputs.digest }}
      containerTag: ${{ fromJson(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dotnet-service

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./dotnet-service
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output digest
        id: image-digest
        run: echo "::set-output name=digest::$(docker inspect ${{ fromJson(steps.meta.outputs.json).tags[0] }} | jq -r '.[].RepoDigests[0]')"
  
  build-go:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      containerImage: ${{ steps.image-digest.outputs.digest }}
      containerTag: ${{ fromJson(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/go-service

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./go-service
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output digest
        id: image-digest
        run: echo "::set-output name=digest::$(docker inspect ${{ fromJson(steps.meta.outputs.json).tags[0] }} | jq -r '.[].RepoDigests[0]')"

  deploy:
    runs-on: ubuntu-latest
    needs: [build-python, build-go, build-dotnet]
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy bicep
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create -g ${{ secrets.RESOURCE_GROUP }} -l centralus
            az deployment group create -g ${{ secrets.RESOURCE_GROUP }} -f ./deploy/main.bicep \
             -p \
                dotnetImage='${{ needs.build-dotnet.outputs.containerImage }}' \
                dotnetPort=80 \
                isDotnetExternalIngress=true \
                pythonImage='${{ needs.build-python.outputs.containerImage }}' \
                pythonPort=5000 \
                isPythonExternalIngress=true \
                goImage='${{ needs.build-go.outputs.containerImage }}' \
                goPort=8050 \
                isGoExternalIngress=true \
                containerRegistry=${{ env.REGISTRY }} \
                containerRegistryUsername=${{ github.actor }} \
                containerRegistryPassword=${{ secrets.GITHUB_TOKEN }}